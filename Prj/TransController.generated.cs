// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace TSSN.FTE.Insurance.Web.Controllers
{
    public partial class TransController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected TransController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetCreatedTransList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCreatedTransList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetCompanyUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCompanyUsers);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> _Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames._Create);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Create()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> _Edit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames._Edit);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> _EditTransDocument()
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames._EditTransDocument);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditTransDocument()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditTransDocument);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendTransToInsurance()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendTransToInsurance);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetBackedTransList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetBackedTransList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetTransListForReceive()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTransListForReceive);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetTransListForBrokerEvaluation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTransListForBrokerEvaluation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetTransListForExpertEvaluation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTransListForExpertEvaluation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetCompanyTariffCategoryList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCompanyTariffCategoryList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public TransController Actions { get { return MVC.Trans; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Trans";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Trans";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string List = "List";
            public readonly string GetCreatedTransList = "GetCreatedTransList";
            public readonly string GetCompanyUsers = "GetCompanyUsers";
            public readonly string _Create = "_Create";
            public readonly string Create = "Create";
            public readonly string _Edit = "_Edit";
            public readonly string Edit = "Edit";
            public readonly string Delete = "Delete";
            public readonly string _EditTransDocument = "_EditTransDocument";
            public readonly string EditTransDocument = "EditTransDocument";
            public readonly string SendTrans = "SendTrans";
            public readonly string SendTransToInsurance = "SendTransToInsurance";
            public readonly string BackedTrans = "BackedTrans";
            public readonly string GetBackedTransList = "GetBackedTransList";
            public readonly string GetTrans = "GetTrans";
            public readonly string GetTransListForReceive = "GetTransListForReceive";
            public readonly string TransBrokerEvaluation = "TransBrokerEvaluation";
            public readonly string GetTransListForBrokerEvaluation = "GetTransListForBrokerEvaluation";
            public readonly string TransExpertEvaluation = "TransExpertEvaluation";
            public readonly string GetTransListForExpertEvaluation = "GetTransListForExpertEvaluation";
            public readonly string GetCompanyTariffCategoryList = "GetCompanyTariffCategoryList";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string List = "List";
            public const string GetCreatedTransList = "GetCreatedTransList";
            public const string GetCompanyUsers = "GetCompanyUsers";
            public const string _Create = "_Create";
            public const string Create = "Create";
            public const string _Edit = "_Edit";
            public const string Edit = "Edit";
            public const string Delete = "Delete";
            public const string _EditTransDocument = "_EditTransDocument";
            public const string EditTransDocument = "EditTransDocument";
            public const string SendTrans = "SendTrans";
            public const string SendTransToInsurance = "SendTransToInsurance";
            public const string BackedTrans = "BackedTrans";
            public const string GetBackedTransList = "GetBackedTransList";
            public const string GetTrans = "GetTrans";
            public const string GetTransListForReceive = "GetTransListForReceive";
            public const string TransBrokerEvaluation = "TransBrokerEvaluation";
            public const string GetTransListForBrokerEvaluation = "GetTransListForBrokerEvaluation";
            public const string TransExpertEvaluation = "TransExpertEvaluation";
            public const string GetTransListForExpertEvaluation = "GetTransListForExpertEvaluation";
            public const string GetCompanyTariffCategoryList = "GetCompanyTariffCategoryList";
        }


        static readonly ActionParamsClass_GetCreatedTransList s_params_GetCreatedTransList = new ActionParamsClass_GetCreatedTransList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetCreatedTransList GetCreatedTransListParams { get { return s_params_GetCreatedTransList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetCreatedTransList
        {
            public readonly string searchModel = "searchModel";
        }
        static readonly ActionParamsClass_GetCompanyUsers s_params_GetCompanyUsers = new ActionParamsClass_GetCompanyUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetCompanyUsers GetCompanyUsersParams { get { return s_params_GetCompanyUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetCompanyUsers
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass__Create s_params__Create = new ActionParamsClass__Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass__Create _CreateParams { get { return s_params__Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass__Create
        {
            public readonly string compnayInsuranceId = "compnayInsuranceId";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass__Edit s_params__Edit = new ActionParamsClass__Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass__Edit _EditParams { get { return s_params__Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass__Edit
        {
            public readonly string companyInsuranceId = "companyInsuranceId";
            public readonly string transId = "transId";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string transId = "transId";
        }
        static readonly ActionParamsClass__EditTransDocument s_params__EditTransDocument = new ActionParamsClass__EditTransDocument();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass__EditTransDocument _EditTransDocumentParams { get { return s_params__EditTransDocument; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass__EditTransDocument
        {
            public readonly string transId = "transId";
        }
        static readonly ActionParamsClass_EditTransDocument s_params_EditTransDocument = new ActionParamsClass_EditTransDocument();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditTransDocument EditTransDocumentParams { get { return s_params_EditTransDocument; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditTransDocument
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_SendTransToInsurance s_params_SendTransToInsurance = new ActionParamsClass_SendTransToInsurance();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendTransToInsurance SendTransToInsuranceParams { get { return s_params_SendTransToInsurance; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendTransToInsurance
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_GetBackedTransList s_params_GetBackedTransList = new ActionParamsClass_GetBackedTransList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetBackedTransList GetBackedTransListParams { get { return s_params_GetBackedTransList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetBackedTransList
        {
            public readonly string jQueryDataTablesModel = "jQueryDataTablesModel";
            public readonly string searchModel = "searchModel";
        }
        static readonly ActionParamsClass_GetTransListForReceive s_params_GetTransListForReceive = new ActionParamsClass_GetTransListForReceive();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetTransListForReceive GetTransListForReceiveParams { get { return s_params_GetTransListForReceive; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetTransListForReceive
        {
            public readonly string jQueryDataTablesModel = "jQueryDataTablesModel";
            public readonly string searchModel = "searchModel";
        }
        static readonly ActionParamsClass_GetTransListForBrokerEvaluation s_params_GetTransListForBrokerEvaluation = new ActionParamsClass_GetTransListForBrokerEvaluation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetTransListForBrokerEvaluation GetTransListForBrokerEvaluationParams { get { return s_params_GetTransListForBrokerEvaluation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetTransListForBrokerEvaluation
        {
            public readonly string jQueryDataTablesModel = "jQueryDataTablesModel";
            public readonly string searchModel = "searchModel";
        }
        static readonly ActionParamsClass_GetTransListForExpertEvaluation s_params_GetTransListForExpertEvaluation = new ActionParamsClass_GetTransListForExpertEvaluation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetTransListForExpertEvaluation GetTransListForExpertEvaluationParams { get { return s_params_GetTransListForExpertEvaluation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetTransListForExpertEvaluation
        {
            public readonly string jQueryDataTablesModel = "jQueryDataTablesModel";
            public readonly string searchModel = "searchModel";
        }
        static readonly ActionParamsClass_GetCompanyTariffCategoryList s_params_GetCompanyTariffCategoryList = new ActionParamsClass_GetCompanyTariffCategoryList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetCompanyTariffCategoryList GetCompanyTariffCategoryListParams { get { return s_params_GetCompanyTariffCategoryList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetCompanyTariffCategoryList
        {
            public readonly string model = "model";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Create = "_Create";
                public readonly string _Documents = "_Documents";
                public readonly string _Edit = "_Edit";
                public readonly string _EditTransDocument = "_EditTransDocument";
                public readonly string _SearchTrans = "_SearchTrans";
                public readonly string BackedTrans = "BackedTrans";
                public readonly string GetTrans = "GetTrans";
                public readonly string List = "List";
                public readonly string SendTrans = "SendTrans";
                public readonly string TransBrokerEvaluation = "TransBrokerEvaluation";
                public readonly string TransExpertEvaluation = "TransExpertEvaluation";
            }
            public readonly string _Create = "~/Views/Trans/_Create.cshtml";
            public readonly string _Documents = "~/Views/Trans/_Documents.cshtml";
            public readonly string _Edit = "~/Views/Trans/_Edit.cshtml";
            public readonly string _EditTransDocument = "~/Views/Trans/_EditTransDocument.cshtml";
            public readonly string _SearchTrans = "~/Views/Trans/_SearchTrans.cshtml";
            public readonly string BackedTrans = "~/Views/Trans/BackedTrans.cshtml";
            public readonly string GetTrans = "~/Views/Trans/GetTrans.cshtml";
            public readonly string List = "~/Views/Trans/List.cshtml";
            public readonly string SendTrans = "~/Views/Trans/SendTrans.cshtml";
            public readonly string TransBrokerEvaluation = "~/Views/Trans/TransBrokerEvaluation.cshtml";
            public readonly string TransExpertEvaluation = "~/Views/Trans/TransExpertEvaluation.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_TransController : TSSN.FTE.Insurance.Web.Controllers.TransController
    {
        public T4MVC_TransController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> List()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
            ListOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetCreatedTransListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetCreatedTransList(TSSN.FTE.Insurance.DTO.SearchTransDto searchModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCreatedTransList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "searchModel", searchModel);
            GetCreatedTransListOverride(callInfo, searchModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetCompanyUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.DTO.SearchUserInsuranceDto model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetCompanyUsers(TSSN.FTE.Insurance.DTO.SearchUserInsuranceDto model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCompanyUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            GetCompanyUsersOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void _CreateOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo, int compnayInsuranceId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> _Create(int compnayInsuranceId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames._Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "compnayInsuranceId", compnayInsuranceId);
            _CreateOverride(callInfo, compnayInsuranceId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TSSN.FTE.Insurance.DTO.CreateTransDto model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Create(TSSN.FTE.Insurance.DTO.CreateTransDto model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            CreateOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void _EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int companyInsuranceId, int transId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> _Edit(int companyInsuranceId, int transId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames._Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "companyInsuranceId", companyInsuranceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "transId", transId);
            _EditOverride(callInfo, companyInsuranceId, transId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TSSN.FTE.Insurance.DTO.EditTransDto model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(TSSN.FTE.Insurance.DTO.EditTransDto model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EditOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int transId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete(int transId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "transId", transId);
            DeleteOverride(callInfo, transId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void _EditTransDocumentOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo, int transId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> _EditTransDocument(int transId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames._EditTransDocument);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "transId", transId);
            _EditTransDocumentOverride(callInfo, transId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }

        [NonAction]
        partial void EditTransDocumentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TSSN.FTE.Insurance.DTO.EditTransDto model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> EditTransDocument(TSSN.FTE.Insurance.DTO.EditTransDto model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditTransDocument);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            EditTransDocumentOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SendTransOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendTrans()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendTrans);
            SendTransOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SendTransToInsuranceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TSSN.FTE.Insurance.DTO.SendTransToInsuranceDto model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendTransToInsurance(TSSN.FTE.Insurance.DTO.SendTransToInsuranceDto model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendTransToInsurance);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            SendTransToInsuranceOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void BackedTransOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> BackedTrans()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.BackedTrans);
            BackedTransOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetBackedTransListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetBackedTransList(TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetBackedTransList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "jQueryDataTablesModel", jQueryDataTablesModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "searchModel", searchModel);
            GetBackedTransListOverride(callInfo, jQueryDataTablesModel, searchModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetTransOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetTrans()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetTrans);
            GetTransOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetTransListForReceiveOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetTransListForReceive(TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTransListForReceive);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "jQueryDataTablesModel", jQueryDataTablesModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "searchModel", searchModel);
            GetTransListForReceiveOverride(callInfo, jQueryDataTablesModel, searchModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void TransBrokerEvaluationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> TransBrokerEvaluation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TransBrokerEvaluation);
            TransBrokerEvaluationOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetTransListForBrokerEvaluationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetTransListForBrokerEvaluation(TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTransListForBrokerEvaluation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "jQueryDataTablesModel", jQueryDataTablesModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "searchModel", searchModel);
            GetTransListForBrokerEvaluationOverride(callInfo, jQueryDataTablesModel, searchModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void TransExpertEvaluationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> TransExpertEvaluation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.TransExpertEvaluation);
            TransExpertEvaluationOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetTransListForExpertEvaluationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetTransListForExpertEvaluation(TSSN.FTE.Insurance.Web.CustomModelBinders.JQueryDataTablesModel jQueryDataTablesModel, TSSN.FTE.Insurance.DTO.SearchTransDto searchModel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetTransListForExpertEvaluation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "jQueryDataTablesModel", jQueryDataTablesModel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "searchModel", searchModel);
            GetTransListForExpertEvaluationOverride(callInfo, jQueryDataTablesModel, searchModel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetCompanyTariffCategoryListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, TSSN.FTE.Insurance.DTO.SearchTariffCategoryDto model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetCompanyTariffCategoryList(TSSN.FTE.Insurance.DTO.SearchTariffCategoryDto model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetCompanyTariffCategoryList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            GetCompanyTariffCategoryListOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
